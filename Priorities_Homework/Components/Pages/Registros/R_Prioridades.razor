@page "/prioridades"
@page "/prioridades/{PrioridadId:int}"
@rendermode InteractiveServer

@inject PrioridadesBLL prioridadesBLL;

<h3>R_Prioridades</h3>
<EditForm Model="prioridades" OnValidSubmit="Guardar"> 
	<DataAnnotationsValidator />
	<div class="card">
		<div class="card-header">
			<h1>Registro Prioridad</h1>
		</div>
		<div class="card-body">
			<label>ID:</label>
			<div class="input-group">
				<InputNumber @bind-Value="prioridades.PrioridadId" class="id-input"></InputNumber>
				<button type="button" class="btn btn-primary bi bi-search" @onclick="Buscar"></button>
			</div>
			<div>
				<label>Descripci&oacute;n:</label>
				<InputText @bind-Value="prioridades.Descripción" class="form-control"></InputText>
				<ValidationMessage For="@(() => prioridades.Descripción)" />
				@if (descripciónExistente) {
					<p class="text-danger">Ya existe una Prioridad con esta descripción.</p>
				}
			</div>
			<div>
				<label>Dias compromiso:</label>
				<InputNumber @bind-Value="prioridades.DiasCompromiso" class="form-control"></InputNumber>
				<ValidationMessage For="@(() => prioridades.DiasCompromiso)" />
			</div>
		</div>
		<div class="card-footer">
			<button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="bi bi-file-earmark-diff-fill" /></button>
			<button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
			<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="bi bi-trash-fill" /></button>
		</div>
	</div>
	@Mensaje
</EditForm>
@code {
	[Parameter]
	public int PrioridadId { get; set; }
	public Prioridad prioridades { get; set; } = new Prioridad();
	public string Mensaje { get; set; } = string.Empty;
	public bool descripciónExistente = false;
	public Prioridad? PrioridadGuardada { get; set; }

	protected override void OnInitialized() {
		if(PrioridadId > 0) {
			prioridades.PrioridadId = PrioridadId;
			Buscar();
		}
	}

	public async Task Buscar() {
		var prioridadEncontrada = await prioridadesBLL.Buscar(prioridades.PrioridadId); // buscamos el ID que esta en nuestra base de datos y lo
		if (prioridadEncontrada != null) {                                       // guardamos en una variable global
			prioridades = prioridadEncontrada;
			Mensaje = "Id encontrado";
		}
		else {
			Mensaje = "ID no encontrado";
		}
	}

	public async Task Nuevo() {
		prioridades = new Prioridad(); // Creamos un nuevo dato... con el html se verá dicho cambio
		Mensaje = string.Empty;
	}

	public async Task Guardar() {
		if(Validar()) {
			Mensaje = "Descripción Existente";
			return;
		}
		var guardado = await prioridadesBLL.Guardar(this.prioridades);
		if(guardado) {
			Nuevo();
			Mensaje = "Se ha guardado Correctamente";
		}
		else {
			Mensaje = "No se guardó correctamente";
		}
	}

	public bool Validar() {
		descripciónExistente = (prioridadesBLL.ObtenerLista(p =>
			p.Descripción!.ToLower() == prioridades.Descripción!.ToLower()
			&& p.PrioridadId != prioridades.PrioridadId).Any());

		return descripciónExistente;
	}

	public async Task Eliminar() {
		if (await prioridadesBLL.Eliminar(prioridades)) {
			Nuevo();
			Mensaje = "Se Eliminaron los datos correctamente";
		}
		else {
			Mensaje = "No se pudo eliminar correctamnte";
		}
	}
}
